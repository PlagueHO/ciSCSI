#---------------------------------# 
#      environment configuration  # 
#---------------------------------# 
os: WMF 5
version: 1.1.0.{build}
environment:
  PowerShellGalleryApiKey:
    secure: 3fXfDuds8yhTa7WTOLIEhytrpsej9kcP+4rPrgLaFVmIhimmc+FgUVxkR4u468LH
install: 
  - cinst -y pester
  - git clone https://github.com/PowerShell/DscResource.Tests
  - ps: |
      $ResourceName = 'ciSCSI'

      # Update AppVeyor Build Version by pulling from Manifest
      $ManifestPath = Join-Path -Path $ENV:APPVEYOR_BUILD_FOLDER -ChildPath "$ResourceName.psd1"
      $ManifestContent = Get-Content -Path $ManifestPath -Raw

      $Regex = '(?<=ModuleVersion\s+=\s+'')(?<ModuleVersion>.*)(?='')'
      $Matches = @([regex]::matches($ManifestContent, $Regex, 'IgnoreCase'))
      $version = $null
      if ($Matches)
      {
          $version = $Matches[0].Value
      }

      # new version
      $version = "$version.$env:APPVEYOR_BUILD_NUMBER"

      # update AppVeyor build
      Update-AppveyorBuild -Version $version

      # Set version number
      $ManifestContent = $ManifestContent -replace '(?<=ModuleVersion\s+=\s+'')(?<ModuleVersion>.*)(?='')', ('${{ModuleVersion}}.{0}' -f $env:APPVEYOR_BUILD_NUMBER)
      Set-Content -Path $ManifestPath -Value $ManifestContent

      Import-Module .\DscResource.Tests\TestHelper.psm1 -Force
      Install-WindowsFeature FS-iSCSITarget-Server,ISNS
      Start-Service msiscsi

#---------------------------------# 
#      build configuration        # 
#---------------------------------# 

build: false

#---------------------------------# 
#      test configuration         # 
#---------------------------------# 

test_script:
    - ps: |
        $testResultsFile = ".\TestsResults.xml"
        $res = Invoke-Pester -OutputFormat NUnitXml -OutputFile $testResultsFile -PassThru
        (New-Object 'System.Net.WebClient').UploadFile("https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path $testResultsFile))
        if ($res.FailedCount -gt 0) { 
            throw "$($res.FailedCount) tests failed."
        }

#---------------------------------# 
#      deployment configuration   # 
#---------------------------------# 

# scripts to run before deployment 
deploy_script: 
  - ps: |
      # Creating project artifact
      $StagingDirectory = (Resolve-Path ..).Path

      # Cleanup staging directory
      Remove-Item -Path (Join-Path -Path $pwd -ChildPath '.git') -Recurse -Force
      Remove-Item -Path (Join-Path -Path $pwd -ChildPath '.gitignore') -Force
      Remove-Item -Path (Join-Path -Path $pwd -ChildPath 'DSCResource.Tests') -Recurse -Force

      # Create zip artifact
      $zipFilePath = Join-Path -Path $StagingDirectory -ChildPath "${env:APPVEYOR_PROJECT_NAME}_${env:APPVEYOR_BUILD_VERSION}.zip"
      Add-Type -assemblyname System.IO.Compression.FileSystem
      [System.IO.Compression.ZipFile]::CreateFromDirectory($pwd, $zipFilePath)

      # Creating NuGet package artifact
      New-Nuspec -packageName $env:APPVEYOR_PROJECT_NAME -version $env:APPVEYOR_BUILD_VERSION -author "Daniel Scott-Raynsford" -owners "Microsoft" -licenseUrl "https://github.com/PowerShell/DscResources/blob/master/LICENSE" -projectUrl "https://github.com/$($env:APPVEYOR_REPO_NAME)" -packageDescription $env:APPVEYOR_PROJECT_NAME -tags "DesiredStateConfiguration DSC DSCResourceKit" -destinationPath .
      nuget pack ".\$($env:APPVEYOR_PROJECT_NAME).nuspec" -outputdirectory .
      $nuGetPackageName = $env:APPVEYOR_PROJECT_NAME + "." + $env:APPVEYOR_BUILD_VERSION + ".nupkg"
      $nuGetPackagePath = (Get-ChildItem $nuGetPackageName).FullName
      
      # Create Publish Script Artifact
      $PublishScriptName = $env:APPVEYOR_PROJECT_NAME + "." + $env:APPVEYOR_BUILD_VERSION + "_publish.ps1"
      $PublishScriptPath = Join-Path -Path $StagingDirectory -ChildPath $PublishScriptName
      Set-Content -Path $PublishScriptPath -Value "Publish-Module -Name $ResourceName -RequiredVersion ${env:APPVEYOR_BUILD_VERSION} -NuGetApiKey (Read-Host -Prompt 'NuGetApiKey')"

      @(
          # You can add other artifacts here
          $zipFilePath,
          $nuGetPackagePath,
          $PublishScriptPath
      ) | % { 
          Write-Host "Pushing package $_ as Appveyor artifact"
          Push-AppveyorArtifact $_
      }

      # If this is a build of the Master branch and not a PR push
      # then publish the Module to the PowerShell Gallery.
      if ((! $ENV:APPVEYOR_PULL_REQUEST_NUMBER) `
        -and ($ENV:APPVEYOR_REPO_BRANCH -eq 'master'))
      {
        Write-Host "Publishing Module to PowerShell Gallery"
        Copy-Item -Path $ModuleFolder -Destination ($ENV:PSModulePath -split ';')[0] -Recurse
        Get-PackageProvider -Name NuGet -ForceBootstrap
        Publish-Module -Name $ResourceName -RequiredVersion ${ENV:APPVEYOR_BUILD_VERSION} -NuGetApiKey $ENV:PowerShellGalleryApiKey -Confirm:$false
      }
